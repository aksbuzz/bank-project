// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: members.sql

package db

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (name, email, phone)
VALUES ($1, $2, $3)
RETURNING id, name, email, phone, membership_type
`

type CreateMemberParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, createMember, arg.Name, arg.Email, arg.Phone)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.MembershipType,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
SELECT id, name, email, phone, membership_type FROM members
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, id int32) (Member, error) {
	row := q.db.QueryRow(ctx, getMember, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.MembershipType,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT id, name, email, phone, membership_type FROM members
WHERE id > $1
ORDER BY id
LIMIT $2
`

type ListMembersParams struct {
	Cursor int32 `json:"cursor"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListMembers(ctx context.Context, arg ListMembersParams) ([]Member, error) {
	rows, err := q.db.Query(ctx, listMembers, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.MembershipType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :exec
UPDATE members
SET name = $2, email = $3, phone = $4
WHERE id = $1
`

type UpdateMemberParams struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) error {
	_, err := q.db.Exec(ctx, updateMember,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
	)
	return err
}

const updateMembershipType = `-- name: UpdateMembershipType :exec
UPDATE members
SET membership_type = $2
WHERE id = $1
`

type UpdateMembershipTypeParams struct {
	ID             int32              `json:"id"`
	MembershipType EnumMembershipType `json:"membership_type"`
}

func (q *Queries) UpdateMembershipType(ctx context.Context, arg UpdateMembershipTypeParams) error {
	_, err := q.db.Exec(ctx, updateMembershipType, arg.ID, arg.MembershipType)
	return err
}
