// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: books.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books ( title, author, year, quantity)
VALUES ($1, $2, $3, $4)
RETURNING id, title, author, year, quantity
`

type CreateBookParams struct {
	Title    string `json:"title"`
	Author   string `json:"author"`
	Year     int32  `json:"year"`
	Quantity int32  `json:"quantity"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Year,
		arg.Quantity,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
		&i.Quantity,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, year, quantity FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
		&i.Quantity,
	)
	return i, err
}

const getBookForUpdate = `-- name: GetBookForUpdate :one
SELECT id, title, author, year, quantity FROM books
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetBookForUpdate(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBookForUpdate, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
		&i.Quantity,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author, year, quantity FROM books
WHERE id > $1
ORDER BY id
LIMIT $2
`

type ListBooksParams struct {
	Cursor int32 `json:"cursor"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, listBooks, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Year,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookQuantity = `-- name: UpdateBookQuantity :exec
UPDATE books
SET quantity = $2
WHERE id = $1
`

type UpdateBookQuantityParams struct {
	ID       int32 `json:"id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateBookQuantity(ctx context.Context, arg UpdateBookQuantityParams) error {
	_, err := q.db.Exec(ctx, updateBookQuantity, arg.ID, arg.Quantity)
	return err
}
