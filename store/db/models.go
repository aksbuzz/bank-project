// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EnumMembershipType string

const (
	EnumMembershipTypeBasic   EnumMembershipType = "basic"
	EnumMembershipTypePremium EnumMembershipType = "premium"
)

func (e *EnumMembershipType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumMembershipType(s)
	case string:
		*e = EnumMembershipType(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumMembershipType: %T", src)
	}
	return nil
}

type NullEnumMembershipType struct {
	EnumMembershipType EnumMembershipType `json:"enum_membership_type"`
	Valid              bool               `json:"valid"` // Valid is true if EnumMembershipType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumMembershipType) Scan(value interface{}) error {
	if value == nil {
		ns.EnumMembershipType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumMembershipType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumMembershipType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumMembershipType), nil
}

type Book struct {
	ID       int32  `json:"id"`
	Title    string `json:"title"`
	Author   string `json:"author"`
	Year     int32  `json:"year"`
	Quantity int32  `json:"quantity"`
}

type Loan struct {
	ID         int32          `json:"id"`
	BookID     int32          `json:"book_id"`
	MemberID   int32          `json:"member_id"`
	LoanDate   pgtype.Date    `json:"loan_date"`
	DueDate    pgtype.Date    `json:"due_date"`
	ReturnDate pgtype.Date    `json:"return_date"`
	OverdueFee pgtype.Numeric `json:"overdue_fee"`
}

type Member struct {
	ID             int32              `json:"id"`
	Name           string             `json:"name"`
	Email          string             `json:"email"`
	Phone          string             `json:"phone"`
	MembershipType EnumMembershipType `json:"membership_type"`
}
